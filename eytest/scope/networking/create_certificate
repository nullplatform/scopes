#!/bin/bash

set -euo pipefail

# Extract variables from CONTEXT
SCOPE_ID=$(echo "$CONTEXT" | jq -r '.scope.id')
CERTIFICATE_NAME=$(echo "$CONTEXT" | jq -r '.scope.domain')

SCOPE_ENV=$(echo "$CONTEXT" | jq -r '.scope.dimensions.environment // empty' | tr '[:lower:]' '[:upper:]')
if [[ -z "${SCOPE_ENV}" || "${SCOPE_ENV}" == "null" || "${SCOPE_ENV}" == "NULL" ]]; then
    ENVIRONMENT="${ENVIRONMENT}"
else
    ENVIRONMENT="${SCOPE_ENV}"
fi

# Required environment variables
: "${CERTIFICATE_DOMAIN_NAME:?Environment variable CERTIFICATE_DOMAIN_NAME not set}"
: "${ENVIRONMENT:?Environment variable ENVIRONMENT not set}"
: "${GATEWAY_NAMESPACE:?Environment variable GATEWAY_NAMESPACE not set}"
: "${GATEWAY_NAME:?Environment variable GATEWAY_NAME not set}"
: "${CERTIFICATE_TEMPLATE:?Environment variable CERTIFICATE_TEMPLATE not set}"

# Optional environment variables with defaults
NAMESPACE="${NAMESPACE:-default}"
CERT_TIMEOUT="${CERT_TIMEOUT:-300}"

# Build template variables using jq
TEMPLATE_VARS=$(jq -n \
  --arg scope_id "$SCOPE_ID" \
  --arg certificate_name "$CERTIFICATE_NAME" \
  --arg environment "$ENVIRONMENT" \
  --arg domain_name "$CERTIFICATE_DOMAIN_NAME" \
  --arg gateway_name "$GATEWAY_NAME" \
  --arg gateway_namespace "$GATEWAY_NAMESPACE" \
  --arg namespace "$NAMESPACE" \
  '{
    scope_id: $scope_id,
    certificate_name: $certificate_name,
    environment: $environment,
    domain_name: $domain_name,
    gateway_name: $gateway_name,
    gateway_namespace: $gateway_namespace,
    namespace: $namespace
  }')

echo "Creating certificate with variables:"
echo "$TEMPLATE_VARS" | jq '.'

# Process template and apply
CERT_NAME="cert-${SCOPE_ID}"
OUTPUT_FILE="/tmp/certificate-${SCOPE_ID}.yaml"

echo "Processing certificate template..."
echo "$TEMPLATE_VARS" | gomplate -f "$CERTIFICATE_TEMPLATE" > "$OUTPUT_FILE"

echo "Applying certificate..."
kubectl apply -f "$OUTPUT_FILE" --field-manager=kubectl-client-side-apply

echo "Waiting for certificate to be ready..."
if kubectl wait --for=condition=Ready "certificate/${CERT_NAME}" -n "$NAMESPACE" --timeout="${CERT_TIMEOUT}s"; then
    echo "Certificate ${CERT_NAME} is ready!"
    
    # Show certificate status
    kubectl get certificate "$CERT_NAME" -n "$NAMESPACE" -o wide
    
    echo "Certificate workflow completed successfully!"
else
    echo "ERROR: Certificate failed to become ready within ${CERT_TIMEOUT} seconds"
    kubectl describe certificate "$CERT_NAME" -n "$NAMESPACE"
    exit 1
fi

# Cleanup temp file
rm -f "$OUTPUT_FILE"