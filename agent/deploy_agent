#!/bin/bash
# --- Script 3: build_and_deploy_agent.sh ---
# Purpose: Build the Docker image and deploy the nullplatform agent into Minikube

set -euo pipefail

# Colors
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
NC="\033[0m"

# Spinner state
SPINNER_PID=""
SPINNER_MSG=""

start_spinner() {
  SPINNER_MSG="$1"
  echo -ne "${BLUE}==>${NC} $SPINNER_MSG..."
  (
    trap "exit 0" SIGTERM
    while true; do
      for c in / - \\ \|; do
        echo -ne "\r${BLUE}==>${NC} $SPINNER_MSG... $c"
        sleep 0.1
      done
    done
  ) &
  SPINNER_PID=$!
  disown
}

stop_spinner_success() {
  if [ -n "$SPINNER_PID" ]; then
    kill "$SPINNER_PID" >/dev/null 2>&1 || true
    wait "$SPINNER_PID" 2>/dev/null || true
  fi
  echo -ne "\r\033[K"
  echo -e "${GREEN}✔${NC} $SPINNER_MSG"
}

stop_spinner_error() {
  if [ -n "$SPINNER_PID" ]; then
    kill "$SPINNER_PID" >/dev/null 2>&1 || true
    wait "$SPINNER_PID" 2>/dev/null || true
  fi
  echo -ne "\r\033[K"
  echo -e "${RED}✖${NC} $SPINNER_MSG"
  exit 1
}

# Default values
IMAGE_TAG="latest"
LOG_LEVEL="INFO"
TAGS="${USER:-unknown}:local"
LOCAL_CODE_PATH="$(pwd)"

# Parse CLI arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --image-tag)
      IMAGE_TAG="$2"; shift 2;;
    --log-level)
      LOG_LEVEL="$2"; shift 2;;
    --tags)
      TAGS="$2"; shift 2;;
    *)
      echo -e "${RED}✖${NC} Unknown option: $1"; exit 1;;
  esac
done

if [[ -z "$NP_API_KEY" ]]; then
  echo -e "${RED}✖${NC} NP_API_KEY must be set in the environment"
  exit 1
fi

# Transform tags into Kubernetes label format (e.g., key1:value1,key2:value2 => key1: value1, key2: value2)
IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
LABELS=""
for tag in "${TAG_ARRAY[@]}"; do
  key="${tag%%:*}"
  value="${tag#*:}"
  LABELS+="        $key: $value\n"
done

build_and_deploy_agent() {
  start_spinner "Building Docker image agent-local:$IMAGE_TAG"
  tmpfile=$(mktemp)
  docker build "$LOCAL_CODE_PATH/agent" -t agent-local:$IMAGE_TAG 2> "$tmpfile" || {
    stop_spinner_error "Docker build failed"
    cat "$tmpfile"
    rm -f "$tmpfile"
    exit 1
  }
  stop_spinner_success
  cat "$tmpfile"
  rm -f "$tmpfile"

  start_spinner "Generating deployment manifest"
  cat > np-agent-manifest.yaml <<EOF
apiVersion: v1
kind: Secret
metadata:
  name: np-agent-secrets
  namespace: nullplatform-tools
type: Opaque
stringData:
  np-api-key: "$NP_API_KEY"
  tags: "$TAGS"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: np-agent
  namespace: nullplatform-tools
  labels:
$(echo -e "$LABELS")
spec:
  replicas: 1
  selector:
    matchLabels:
      app: np-agent
  template:
    metadata:
      labels:
        app: np-agent
$(echo -e "$LABELS")
    spec:
      serviceAccountName: np-agent-sa
      containers:
      - name: np-agent
        image: agent-local:$IMAGE_TAG
        imagePullPolicy: Never
        env:
        - name: NP_LOG_LEVEL
          value: "$LOG_LEVEL"
        - name: TAGS
          valueFrom:
            secretKeyRef:
              name: np-agent-secrets
              key: tags
        - name: NP_API_KEY
          valueFrom:
            secretKeyRef:
              name: np-agent-secrets
              key: np-api-key
        volumeMounts:
        - name: np-services
          mountPath: /root/.np/services
      volumes:
      - name: np-services
        hostPath:
          path: /mnt/np-services
          type: Directory
EOF
  stop_spinner_success

  start_spinner "Applying deployment"
  kubectl apply -f np-agent-manifest.yaml >/dev/null 2>&1 || stop_spinner_error "Failed to deploy agent"
  stop_spinner_success
}

shutdown_agent() {
  start_spinner "Shutting down np-agent deployment"
  kubectl delete deployment np-agent -n nullplatform-tools >/dev/null 2>&1 || stop_spinner_error "Failed to delete deployment"
  stop_spinner_success
}

view_logs() {
  POD_NAME=$(kubectl get pods -n nullplatform-tools -l app=np-agent -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)
  if [ -n "$POD_NAME" ]; then
    echo -e "${BLUE}==>${NC} Streaming logs for pod: $POD_NAME"
    kubectl logs -n nullplatform-tools "$POD_NAME"
  else
    echo -e "${RED}✖${NC} No np-agent pod found"
  fi
}

exec_into_pod() {
  POD_NAME=$(kubectl get pods -n nullplatform-tools -l app=np-agent -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)
  if [ -n "$POD_NAME" ]; then
    echo -e "${BLUE}==>${NC} Opening shell in pod: $POD_NAME"
    kubectl exec -it -n nullplatform-tools "$POD_NAME" -- /bin/sh
  else
    echo -e "${RED}✖${NC} No np-agent pod found"
  fi
}

# Interactive menu
while true; do
  echo ""
  echo "===== NP Agent Deployment Tool ====="
  echo "1) Deploy agent"
  echo "2) Shutdown agent"
  echo "3) View logs"
  echo "4) Connect to agent"
  echo "5) Exit"
  echo "===================================="
  echo -n "Select an option (1-5): "
  read -r choice
  case $choice in
    1) build_and_deploy_agent ;;
    2) shutdown_agent ;;
    3) view_logs ;;
    4) exec_into_pod ;;
    5) echo "Exiting..."; exit 0 ;;
    *) echo "Invalid option. Please try again." ;;
  esac
done
