#!/bin/bash

set -euo pipefail

# Extract variables from CONTEXT
SCOPE_ID=$(echo "$CONTEXT" | jq -r '.scope.id')
CERTIFICATE_NAME=$(echo "$CONTEXT" | jq -r '.scope.domain')

SCOPE_ENV=$(echo "$CONTEXT" | jq -r '.scope.dimensions.environment // empty' | tr '[:lower:]' '[:upper:]')
if [[ -z "${SCOPE_ENV}" || "${SCOPE_ENV}" == "null" || "${SCOPE_ENV}" == "NULL" ]]; then
    ENVIRONMENT="${ENVIRONMENT}"
else
    ENVIRONMENT="${SCOPE_ENV}"
fi

# Set default values for environment variables
CERTIFICATE_DOMAIN_NAME="${CERTIFICATE_DOMAIN_NAME:-sbp.eyclienthub.com}"
GATEWAY_NAMESPACE="${GATEWAY_NAMESPACE:-gateways}"
GATEWAY_NAME="${GATEWAY_NAME:-gateway-public}"
DNS_VALUE="${DNS_VALUE:-4.156.211.174}"

# Required environment variables
: "${CERTIFICATE_DOMAIN_NAME:?Environment variable CERTIFICATE_DOMAIN_NAME not set}"
: "${ENVIRONMENT:?Environment variable ENVIRONMENT not set}"
: "${GATEWAY_NAMESPACE:?Environment variable GATEWAY_NAMESPACE not set}"
: "${GATEWAY_NAME:?Environment variable GATEWAY_NAME not set}"
: "${CERTIFICATE_TEMPLATE:?Environment variable CERTIFICATE_TEMPLATE not set}"
: "${K8S_NAMESPACE:?Environment variable K8S_NAMESPACE not set}"

# Optional environment variables with defaults
CERT_TIMEOUT="${CERT_TIMEOUT:-800}"

# Process template and apply
CERT_NAME="cert-${SCOPE_ID}"
OUTPUT_FILE="/tmp/certificate-${SCOPE_ID}.yaml"
CONTEXT_PATH="/tmp/context-${SCOPE_ID}.json"

# Build extended context with certificate-specific variables
echo "$CONTEXT" | jq \
  --arg scope_id "$SCOPE_ID" \
  --arg certificate_name "$CERTIFICATE_NAME" \
  --arg environment "$ENVIRONMENT" \
  --arg domain_name "$CERTIFICATE_DOMAIN_NAME" \
  --arg gateway_name "$GATEWAY_NAME" \
  --arg gateway_namespace "$GATEWAY_NAMESPACE" \
  --arg namespace "$K8S_NAMESPACE" \
  --arg dns_value "$DNS_VALUE" \
  '. + {
    scope_id: $scope_id,
    certificate_name: $certificate_name,
    environment: $environment,
    domain_name: $domain_name,
    gateway_name: $gateway_name,
    gateway_namespace: $gateway_namespace,
    namespace: $namespace,
    dns_value: $dns_value
  }' > "$CONTEXT_PATH"

echo "Building Template: $CERTIFICATE_TEMPLATE to $OUTPUT_FILE"

gomplate -c .="$CONTEXT_PATH" \
  --file "$CERTIFICATE_TEMPLATE" \
  --out "$OUTPUT_FILE"

TEMPLATE_GENERATION_STATUS=$?

if [[ $TEMPLATE_GENERATION_STATUS -ne 0 ]]; then
    echo "Error building certificate template"
    rm -f "$CONTEXT_PATH"
    exit 1
fi

echo "Applying certificate..."
kubectl apply -f "$OUTPUT_FILE" --field-manager=kubectl-client-side-apply

echo "Waiting for certificate to be ready..."
if kubectl wait --for=condition=Ready "certificate.pki.ey.com/${CERT_NAME}" -n "$K8S_NAMESPACE" --timeout="${CERT_TIMEOUT}s"; then
    echo "Certificate ${CERT_NAME} is ready!"
    
    # Show certificate status
    kubectl get certificate.pki.ey.com "$CERT_NAME" -n "$K8S_NAMESPACE" -o wide
    
    echo "Certificate workflow completed successfully!"
else
    echo "ERROR: Certificate failed to become ready within ${CERT_TIMEOUT} seconds"
    kubectl describe certificate.pki.ey.com "$CERT_NAME" -n "$K8S_NAMESPACE"
    rm -f "$CONTEXT_PATH"
    exit 1
fi

# Cleanup temp files
rm -f "$CONTEXT_PATH"
