#!/bin/bash

set -euo pipefail

# Colors
GREEN="\033[0;32m"
BLUE="\033[0;34m"
YELLOW="\033[1;33m"
RED="\033[0;31m"
NC="\033[0m"

# Spinner state
SPINNER_PID=""
SPINNER_MSG=""

start_spinner() {
  SPINNER_MSG="$1"
  echo -ne "${BLUE}==>${NC} $SPINNER_MSG..."
  (
    while true; do
      for c in / - \\ \|; do
        echo -ne "\r${BLUE}==>${NC} $SPINNER_MSG... $c"
        sleep 0.1
      done
    done
  ) &
  SPINNER_PID=$!
  disown
}

stop_spinner_success() {
  kill "$SPINNER_PID" >/dev/null 2>&1 || true
  wait "$SPINNER_PID" 2>/dev/null || true
  echo -ne "\r\033[K"
  echo -e "${GREEN}✔${NC} $SPINNER_MSG"
}

stop_spinner_error() {
  kill "$SPINNER_PID" >/dev/null 2>&1 || true
  wait "$SPINNER_PID" 2>/dev/null || true
  echo -ne "\r\033[K"
  echo -e "${RED}✖${NC} $SPINNER_MSG"
  exit 1
}

# Validate NRN
start_spinner "Validating that the NRN has been loaded into the environment."
if [ -z "${NRN:-}" ]; then
  stop_spinner_error "NRN is not set. Please export the NRN variable before running the script."
fi

APPLICATION_ID=$(echo "$NRN" | sed -n 's/.*application=\([0-9]*\).*/\1/p')
stop_spinner_success "The NRN was found and parsed successfully (application_id=$APPLICATION_ID)."

# Build creation
start_spinner "Creating a new build for application_id=$APPLICATION_ID."

{
  BUILD=$(np build create --format json --body "{\"application_id\": $APPLICATION_ID, \"branch\": \"main\",\"commit\": {\"id\": \"demo-custom-scopes-job\",\"permalink\": \"link\"}, \"description\":\"custom scope demo\"}" 2>/dev/null) || stop_spinner_error "An error occurred while creating the build."
  BUILD_ID=$(echo "$BUILD" | jq -r .id)
} || stop_spinner_error "Unable to parse the build response."

stop_spinner_success "The build was created successfully (build_id=$BUILD_ID)."

# Asset creation
start_spinner "Registering an asset associated with build_id=$BUILD_ID."

{
  ASSET=$(np asset create --format json --body "{\"metadata\": {}, \"type\": \"docker-image\",\"url\": \"federicomalehnullplatform/custom-scopes-job-demo:latest\",\"name\": \"job_asset\",\"build_id\": $BUILD_ID,\"application_id\": $APPLICATION_ID, \"commit-sha\": \"demo-custom-scopes-job\"}" 2>/dev/null) || stop_spinner_error "An error occurred while registering the asset."
  ASSET_ID=$(echo "$ASSET" | jq -r .id)
} || stop_spinner_error "Unable to parse the asset response."

stop_spinner_success "The asset was registered successfully (asset_id=$ASSET_ID)."

# Build update
start_spinner "Updating the build status to 'successful'."

(
  np build update --id "$BUILD_ID" --status successful >/dev/null 2>&1
) || stop_spinner_error "An error occurred while updating the build status."

stop_spinner_success "The build status was updated successfully."

# Release creation
VERSION=0.0.2-job

start_spinner "Creating a new release (version $VERSION) for build_id=$BUILD_ID and application_id=$APPLICATION_ID."

{
  RELEASE=$(np release create --format json --body "{\"status\": \"active\", \"build_id\": $BUILD_ID, \"application_id\": $APPLICATION_ID, \"semver\": \"$VERSION\"}" 2>/dev/null) || stop_spinner_error "An error occurred while creating the release."
  RELEASE_ID=$(echo "$RELEASE" | jq -r .id)
} || stop_spinner_error "Unable to parse the release response."

stop_spinner_success "The release was created successfully (release_id=$RELEASE_ID)."

echo -e "${GREEN}✔${NC} The deployment pipeline completed successfully."
