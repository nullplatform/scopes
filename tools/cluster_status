#!/bin/bash

# K8s Cluster Status Check Script
# This script provides a comprehensive overview of cluster health and resources

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Header
echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}   Kubernetes Cluster Status Report${NC}"
echo -e "${BLUE}   $(date)${NC}"
echo -e "${BLUE}========================================${NC}\n"

# Function to print section headers
print_section() {
    echo -e "\n${GREEN}=== $1 ===${NC}"
}

# Function to check if kubectl is available
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        echo -e "${RED}Error: kubectl not found. Please install kubectl.${NC}"
        exit 1
    fi
}

# Check cluster connectivity
check_connectivity() {
    print_section "Cluster Connectivity"
    if kubectl cluster-info &> /dev/null; then
        echo -e "${GREEN}✓ Cluster is reachable${NC}"
        kubectl cluster-info | head -n 2
        echo ""
        echo "Current context: $(kubectl config current-context)"
        echo "API Server: $(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')"
    else
        echo -e "${RED}✗ Cannot connect to cluster${NC}"
        exit 1
    fi
}

# Get node status and resources
check_nodes() {
    print_section "Node Status & Resources"

    total_nodes=$(kubectl get nodes --no-headers | wc -l)
    ready_nodes=$(kubectl get nodes --no-headers | grep -c " Ready" || echo "0")

    echo "Total Nodes: $total_nodes"
    echo "Ready Nodes: $ready_nodes"
    echo ""

    # Node status summary
    echo "Node Status Summary:"
    kubectl get nodes --no-headers | awk '{print $2}' | sort | uniq -c | awk '{printf "  %s: %d\n", $2, $1}'
    echo ""

    # Check if metrics-server is available
    if kubectl top nodes &> /dev/null; then
        echo "Nodes with High Resource Usage (>80% CPU or Memory):"

        # Get node metrics and parse for high usage
        compromised_found=false
        while IFS= read -r line; do
            if [[ $line == NAME* ]]; then
                continue
            fi

            node=$(echo "$line" | awk '{print $1}')
            cpu=$(echo "$line" | awk '{print $2}')
            cpu_pct=$(echo "$line" | awk '{print $3}' | tr -d '%')
            mem=$(echo "$line" | awk '{print $4}')
            mem_pct=$(echo "$line" | awk '{print $5}' | tr -d '%')

            # Check if CPU or Memory usage is above 80%
            if [ ! -z "$cpu_pct" ] && [ "$cpu_pct" -gt 80 ] 2>/dev/null; then
                echo -e "  ${RED}⚠ $node - CPU: $cpu ($cpu_pct%) Memory: $mem ($mem_pct%)${NC}"
                compromised_found=true
            elif [ ! -z "$mem_pct" ] && [ "$mem_pct" -gt 80 ] 2>/dev/null; then
                echo -e "  ${YELLOW}⚠ $node - CPU: $cpu ($cpu_pct%) Memory: $mem ($mem_pct%)${NC}"
                compromised_found=true
            fi
        done < <(kubectl top nodes)

        if [ "$compromised_found" = false ]; then
            echo -e "  ${GREEN}✓ All nodes are operating within normal parameters${NC}"
        fi

        echo ""
        echo "Total Cluster Resources:"
        kubectl top nodes --no-headers | awk '
            {
                gsub(/m/, "", $2); gsub(/Mi|Gi/, "", $4);
                cpu_sum += $2; mem_sum += $4;
            }
            END {
                printf "  Total CPU Usage: %.2f cores\n", cpu_sum/1000;
                printf "  Total Memory Usage: %.2f GB\n", mem_sum/1024;
            }'
    else
        echo -e "${YELLOW}Metrics server not available - install metrics-server for resource usage monitoring${NC}"
        echo ""
        echo "Node Capacity (Total Available):"
        kubectl get nodes -o json | jq -r '.items[] | "\(.metadata.name): CPU=\(.status.capacity.cpu) Memory=\(.status.capacity.memory) Storage=\(.status.capacity."ephemeral-storage")"'
    fi

    echo ""
    echo "Storage Pressure Check:"
    storage_issues=$(kubectl get nodes -o json | jq -r '.items[] | select(.status.conditions[] | select(.type=="DiskPressure" and .status=="True")) | .metadata.name' 2>/dev/null)
    if [ -z "$storage_issues" ]; then
        echo -e "  ${GREEN}✓ No storage pressure detected${NC}"
    else
        echo -e "  ${RED}⚠ Nodes with storage pressure:${NC}"
        echo "$storage_issues" | sed 's/^/    /'
    fi
}

# Check pod status across all namespaces
check_pods() {
    print_section "Pod Status"

    # Pod statistics
    total_pods=$(kubectl get pods --all-namespaces --no-headers | wc -l)
    running_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Running --no-headers | wc -l)
    pending_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Pending --no-headers | wc -l)
    failed_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Failed --no-headers | wc -l)

    echo "Total Pods: $total_pods"
    echo -e "  ${GREEN}Running: $running_pods${NC}"
    echo -e "  ${YELLOW}Pending: $pending_pods${NC}"
    echo -e "  ${RED}Failed: $failed_pods${NC}"

    # Check for pods with issues
    echo ""
    echo "Pods Not Running:"
    kubectl get pods --all-namespaces --field-selector=status.phase!=Running --no-headers 2>/dev/null | head -n 20
    if [ $(kubectl get pods --all-namespaces --field-selector=status.phase!=Running --no-headers | wc -l) -eq 0 ]; then
        echo -e "  ${GREEN}All pods are running!${NC}"
    fi

    # Pods with restarts
    echo ""
    echo "Pods with High Restart Count (>5):"
    kubectl get pods --all-namespaces -o json | jq -r '.items[] | select(.status.containerStatuses[]?.restartCount > 5) | "\(.metadata.namespace)/\(.metadata.name) - Restarts: \(.status.containerStatuses[0].restartCount)"' 2>/dev/null || echo "  None found"
}

# Check resource usage
check_resource_usage() {
    print_section "Resource Usage (CPU, Memory, Storage)"

    if kubectl top pods --all-namespaces --containers=false &> /dev/null; then
        echo "Top 10 Pods by CPU Usage:"
        kubectl top pods --all-namespaces --containers=false --no-headers 2>/dev/null | sort -k3 -rn | head -n 10 | awk '{printf "  %s/%s - CPU: %s, Memory: %s\n", $1, $2, $3, $4}'

        echo ""
        echo "Top 10 Pods by Memory Usage:"
        kubectl top pods --all-namespaces --containers=false --no-headers 2>/dev/null | sort -k4 -rn | head -n 10 | awk '{printf "  %s/%s - CPU: %s, Memory: %s\n", $1, $2, $3, $4}'

        echo ""
        echo "Total Resource Usage Across All Pods:"
        kubectl top pods --all-namespaces --containers=false --no-headers 2>/dev/null | awk '
            {
                gsub(/m/, "", $3); gsub(/Mi|Gi/, "", $4);
                cpu_sum += $3; mem_sum += $4;
                count++;
            }
            END {
                printf "  Total Pods: %d\n", count;
                printf "  Total CPU: %.2f cores\n", cpu_sum/1000;
                printf "  Total Memory: %.2f GB\n", mem_sum/1024;
            }'
    else
        echo -e "${YELLOW}Metrics server not available - install for resource usage monitoring${NC}"
    fi

    echo ""
    echo "Namespace Resource Quotas:"
    quota_count=$(kubectl get resourcequota --all-namespaces --no-headers 2>/dev/null | wc -l)
    if [ "$quota_count" -gt 0 ]; then
        kubectl get resourcequota --all-namespaces -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,CPU_USED:.status.used.cpu,CPU_HARD:.status.hard.cpu,MEMORY_USED:.status.used.memory,MEMORY_HARD:.status.hard.memory 2>/dev/null
    else
        echo "  No resource quotas defined"
    fi

    echo ""
    echo "Storage Status:"
    pv_total=$(kubectl get pv --no-headers 2>/dev/null | wc -l)
    pv_bound=$(kubectl get pv --no-headers 2>/dev/null | grep -c "Bound" || echo "0")
    pv_available=$(kubectl get pv --no-headers 2>/dev/null | grep -c "Available" || echo "0")

    echo "  Total PersistentVolumes: $pv_total"
    echo "  Bound: $pv_bound | Available: $pv_available"

    if [ "$pv_total" -gt 0 ]; then
        echo ""
        echo "  PersistentVolume Details:"
        kubectl get pv -o custom-columns=NAME:.metadata.name,CAPACITY:.spec.capacity.storage,STATUS:.status.phase,CLAIM:.spec.claimRef.name 2>/dev/null | head -n 15
    fi

    echo ""
    pvc_total=$(kubectl get pvc --all-namespaces --no-headers 2>/dev/null | wc -l)
    pvc_bound=$(kubectl get pvc --all-namespaces --no-headers 2>/dev/null | grep -c "Bound" || echo "0")
    pvc_pending=$(kubectl get pvc --all-namespaces --no-headers 2>/dev/null | grep -c "Pending" || echo "0")

    echo "  Total PersistentVolumeClaims: $pvc_total"
    echo "  Bound: $pvc_bound | Pending: $pvc_pending"

    if [ "$pvc_pending" -gt 0 ]; then
        echo ""
        echo -e "  ${YELLOW}⚠ Pending PVCs (waiting for binding):${NC}"
        kubectl get pvc --all-namespaces --field-selector status.phase=Pending -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,STATUS:.status.phase,STORAGE:.spec.resources.requests.storage
    fi
}

# Check recent cluster events
check_events() {
    print_section "Recent Cluster Events (Last 50)"

    echo "Warning and Error Events:"
    kubectl get events --all-namespaces --sort-by='.lastTimestamp' --field-selector type!=Normal | tail -n 50

    echo ""
    echo "All Recent Events (Last 20):"
    kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -n 20
}

# Check cluster services
check_services() {
    print_section "Critical Services Status"

    echo "CoreDNS Status:"
    kubectl get pods -n kube-system -l k8s-app=kube-dns

    echo ""
    echo "Ingress Controllers:"
    kubectl get pods --all-namespaces -l app.kubernetes.io/name=ingress-nginx 2>/dev/null || echo "  No nginx ingress found"
    kubectl get pods --all-namespaces -l app=traefik 2>/dev/null || echo "  No traefik ingress found"

    echo ""
    echo "LoadBalancer Services:"
    kubectl get svc --all-namespaces --field-selector spec.type=LoadBalancer
}

# Check deployments and statefulsets
check_workloads() {
    print_section "Workload Status"

    echo "Deployments Status:"
    total_deployments=$(kubectl get deployments --all-namespaces --no-headers 2>/dev/null | wc -l)
    healthy_deployments=$(kubectl get deployments --all-namespaces --no-headers 2>/dev/null | awk '$3 == $4 {count++} END {print count+0}')

    echo "  Total: $total_deployments | Healthy: $healthy_deployments"

    # Show only deployments with issues
    echo ""
    echo "  Deployments with Issues (Ready ≠ Desired):"
    unhealthy=$(kubectl get deployments --all-namespaces -o json 2>/dev/null | jq -r '.items[] | select(.status.readyReplicas != .spec.replicas) | "\(.metadata.namespace)/\(.metadata.name): \(.status.readyReplicas // 0)/\(.spec.replicas)"')

    if [ -z "$unhealthy" ]; then
        echo -e "    ${GREEN}✓ All deployments are healthy${NC}"
    else
        echo "$unhealthy" | sed 's/^/    /' | while read line; do echo -e "    ${YELLOW}⚠ $line${NC}"; done
    fi

    echo ""
    echo "StatefulSets Status:"
    total_sts=$(kubectl get statefulsets --all-namespaces --no-headers 2>/dev/null | wc -l)
    healthy_sts=$(kubectl get statefulsets --all-namespaces --no-headers 2>/dev/null | awk '$3 == $4 {count++} END {print count+0}')

    echo "  Total: $total_sts | Healthy: $healthy_sts"

    if [ "$total_sts" -gt 0 ]; then
        echo ""
        echo "  StatefulSets with Issues:"
        unhealthy_sts=$(kubectl get statefulsets --all-namespaces -o json 2>/dev/null | jq -r '.items[] | select(.status.readyReplicas != .spec.replicas) | "\(.metadata.namespace)/\(.metadata.name): \(.status.readyReplicas // 0)/\(.spec.replicas)"')

        if [ -z "$unhealthy_sts" ]; then
            echo -e "    ${GREEN}✓ All statefulsets are healthy${NC}"
        else
            echo "$unhealthy_sts" | sed 's/^/    /' | while read line; do echo -e "    ${YELLOW}⚠ $line${NC}"; done
        fi
    fi

    echo ""
    echo "DaemonSets Status:"
    total_ds=$(kubectl get daemonsets --all-namespaces --no-headers 2>/dev/null | wc -l)
    healthy_ds=$(kubectl get daemonsets --all-namespaces -o json 2>/dev/null | jq '[.items[] | select(.status.numberReady == .status.desiredNumberScheduled)] | length')

    echo "  Total: $total_ds | Healthy: $healthy_ds"

    if [ "$total_ds" -gt 0 ]; then
        echo ""
        echo "  DaemonSets with Issues:"
        unhealthy_ds=$(kubectl get daemonsets --all-namespaces -o json 2>/dev/null | jq -r '.items[] | select(.status.numberReady != .status.desiredNumberScheduled) | "\(.metadata.namespace)/\(.metadata.name): \(.status.numberReady)/\(.status.desiredNumberScheduled) ready"')

        if [ -z "$unhealthy_ds" ]; then
            echo -e "    ${GREEN}✓ All daemonsets are healthy${NC}"
        else
            echo "$unhealthy_ds" | sed 's/^/    /' | while read line; do echo -e "    ${YELLOW}⚠ $line${NC}"; done
        fi
    fi
}

# Check certificate expiration (if cert-manager is installed)
check_certificates() {
    print_section "Certificate Status"

    if kubectl get certificates --all-namespaces &> /dev/null; then
        kubectl get certificates --all-namespaces -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,READY:.status.conditions[-1].status,SECRET:.spec.secretName
    else
        echo "  cert-manager not installed or no certificates found"
    fi
}

# Summary function
print_summary() {
    print_section "Summary"

    total_nodes=$(kubectl get nodes --no-headers | wc -l)
    ready_nodes=$(kubectl get nodes --no-headers | grep -c " Ready" || echo "0")
    total_pods=$(kubectl get pods --all-namespaces --no-headers | wc -l)
    running_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Running --no-headers | wc -l)
    pending_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Pending --no-headers | wc -l)
    failed_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Failed --no-headers | wc -l)

    echo "Cluster: $(kubectl config current-context)"
    echo "Nodes: $ready_nodes/$total_nodes Ready"
    echo "Pods: $running_pods Running, $pending_pods Pending, $failed_pods Failed"

    # Health assessment
    echo ""
    if [ $ready_nodes -eq $total_nodes ] && [ $pending_pods -eq 0 ] && [ $failed_pods -eq 0 ]; then
        echo -e "${GREEN}✓ Cluster health: GOOD${NC}"
    elif [ $pending_pods -gt 0 ] || [ $failed_pods -gt 0 ]; then
        echo -e "${YELLOW}⚠ Cluster health: WARNING - Check pod status${NC}"
    else
        echo -e "${RED}✗ Cluster health: CRITICAL - Immediate attention required${NC}"
    fi
}

# Main execution
main() {
    check_kubectl
    check_connectivity
    check_nodes
    check_pods
    check_resource_usage
    check_events
    check_services
    check_workloads
    check_certificates
    print_summary

    echo -e "\n${BLUE}========================================${NC}"
    echo -e "${BLUE}   Report Complete${NC}"
    echo -e "${BLUE}========================================${NC}"
}

# Run the script
main