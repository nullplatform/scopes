#!/bin/bash

set -euo pipefail

# Default values
DEFAULT_CONTAINER_NAME="http"
MIN_LOGS_PER_POD=10
DEFAULT_LIMIT=100

# Configuration variables
NAMESPACE=""
APPLICATION_ID=""
SCOPE_ID=""
DEPLOYMENT_ID=""
LIMIT=$DEFAULT_LIMIT
NEXT_PAGE_TOKEN=""
FILTER_PATTERN=""
START_TIME=""

# Function to show usage
usage() {
    cat << EOF
Usage: $0 [OPTIONS]

OPTIONS:
    -n, --namespace NAMESPACE        Kubernetes namespace
    -a, --application-id ID          Application ID
    -s, --scope-id ID                Scope ID
    -d, --deployment-id ID           Deployment ID
    -l, --limit NUMBER               Maximum number of log entries (default: $DEFAULT_LIMIT)
    -t, --next-page-token TOKEN      Token for pagination
    -f, --filter PATTERN             Filter pattern
    --start-time TIME                Start time for logs (RFC3339 format, e.g., 2024-01-01T12:00:00Z)
    -h, --help                       Show this help message

EOF
}

# Function to parse command line arguments
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -n|--namespace)
                NAMESPACE="$2"
                shift 2
                ;;
            -a|--application-id)
                APPLICATION_ID="$2"
                shift 2
                ;;
            -s|--scope-id)
                SCOPE_ID="$2"
                shift 2
                ;;
            -d|--deployment-id)
                DEPLOYMENT_ID="$2"
                shift 2
                ;;
            -l|--limit)
                LIMIT="$2"
                shift 2
                ;;
            -t|--next-page-token)
                NEXT_PAGE_TOKEN="$2"
                shift 2
                ;;
            -f|--filter)
                FILTER_PATTERN="$2"
                shift 2
                ;;
            --start-time)
                START_TIME="$2"
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                echo "Unknown option: $1" >&2
                usage
                exit 1
                ;;
        esac
    done
}

# Function to build label selector
build_label_selector() {
    local labels="nullplatform=true"
    
    if [[ -n "$APPLICATION_ID" ]]; then
        labels="$labels,application_id=$APPLICATION_ID"
    fi
    
    if [[ -n "$SCOPE_ID" ]]; then
        labels="$labels,scope_id=$SCOPE_ID"
    fi
    
    if [[ -n "$DEPLOYMENT_ID" ]]; then
        labels="$labels,deployment_id=$DEPLOYMENT_ID"
    fi
    
    echo "$labels"
}

# Function to decode base64 pagination token
decode_token() {
    local token="$1"
    if [[ -z "$token" ]]; then
        echo "{}"
        return
    fi
    
    echo "$token" | base64 -d 2>/dev/null || echo "{}"
}

# Function to encode pagination token
encode_token() {
    local data="$1"
    if [[ "$data" == "{}" ]] || [[ -z "$data" ]]; then
        echo ""
        return
    fi
    
    echo "$data" | base64 | tr -d '\n'
}

get_pods() {
    local label_selector="$1"
    local namespace_arg=""
    
    if [[ -n "$NAMESPACE" ]]; then
        namespace_arg="-n $NAMESPACE"
    fi
    
    # Get pods with name and uid (as pod ID)
    kubectl get pods $namespace_arg -l "$label_selector" \
        -o jsonpath='{range .items[*]}{.metadata.name}|{.metadata.uid}{"\n"}{end}' 2>/dev/null || echo ""
}

# Function to calculate pod limit
calculate_pod_limit() {
    local total_limit="$1"
    local pod_count="$2"
    
    if [[ $pod_count -eq 0 ]]; then
        echo $MIN_LOGS_PER_POD
        return
    fi
    
    local pod_limit=$((total_limit / pod_count))
    
    if [[ $pod_limit -lt $MIN_LOGS_PER_POD ]]; then
        pod_limit=$MIN_LOGS_PER_POD
    fi
    
    echo $pod_limit
}

# Function to get logs from a single pod
get_pod_logs() {
    local pod_name="$1"
    local since_time="$2"
    local pod_limit="$3"
    local namespace_arg=""
    
    if [[ -n "$NAMESPACE" ]]; then
        namespace_arg="-n $NAMESPACE"
    fi
    
    local kubectl_args="$namespace_arg logs $pod_name -c $DEFAULT_CONTAINER_NAME --timestamps=true"
    
    # Add since-time if provided
    if [[ -n "$since_time" ]]; then
        kubectl_args="$kubectl_args --since-time=$since_time"
    fi
    
    # Add limit bytes (approximate)
    local limit_bytes=$((pod_limit * 1024))
    kubectl_args="$kubectl_args --limit-bytes=$limit_bytes"
    
    kubectl $kubectl_args 2>/dev/null || echo ""
}

# Function to process log lines and apply filtering
process_log_lines() {
    local logs="$1"
    local filter_pattern="$2"
    local pod_name="$3"
    local pod_id="$4"
    
    local processed_logs=""
    local last_timestamp=""
    
    while IFS= read -r line; do
        [[ -z "$line" ]] && continue
        
        # Extract timestamp and content
        local timestamp=$(echo "$line" | cut -d' ' -f1)
        local content=$(echo "$line" | cut -d' ' -f2-)
        
        # Apply filter if specified
        if [[ -n "$filter_pattern" ]] && [[ "$line" != *"$filter_pattern"* ]]; then
            continue
        fi
        
        # Create log entry JSON with pod info
        local log_entry=$(jq -n \
            --arg msg "$content" \
            --arg dt "$timestamp" \
            --arg pod "$pod_name" \
            --arg podId "$pod_id" \
            '{message: $msg, datetime: $dt, pod: {name: $pod, id: $podId}}')
        
        if [[ -n "$processed_logs" ]]; then
            processed_logs="$processed_logs,$log_entry"
        else
            processed_logs="$log_entry"
        fi
        
        last_timestamp="$timestamp"
        
    done <<< "$logs"
    
    echo "{
        \"logs\": [$processed_logs],
        \"last_timestamp\": \"$last_timestamp\"
    }"
}

# Function to determine since time for a pod
determine_since_time() {
    local pod_id="$1"
    local last_read_times="$2"
    
    # Try to get last read time for this pod from token
    local last_time=$(echo "$last_read_times" | jq -r --arg podId "$pod_id" '.[$podId] // empty' 2>/dev/null)
    
    if [[ -n "$last_time" && "$last_time" != "null" ]]; then
        echo "$last_time"
        return
    fi
    
    # Fall back to config start time
    if [[ -n "$START_TIME" ]]; then
        echo "$START_TIME"
        return
    fi
    
    echo ""
}

# Function to sort and limit logs
sort_and_limit_logs() {
    local logs_json="$1"
    local limit="$2"
    
    echo "$logs_json" | jq --argjson limit "$limit" \
        'sort_by(.datetime) | if length > $limit then .[:$limit] else . end'
}

# Main function
main() {
    parse_args "$@"
    
    # Build label selector
    local label_selector=$(build_label_selector)
    
    local pods_data=$(get_pods "$label_selector")
    
    if [[ -z "$pods_data" ]]; then
        # No pods found, return empty result
        jq -n '{results: [], next_page_token: ""}'
        return 0
    fi
    
    declare -a pod_names=()
    declare -a pod_ids=()
    
    while IFS='|' read -r name id; do
        [[ -n "$name" && -n "$id" ]] || continue
        pod_names+=("$name")
        pod_ids+=("$id")
    done <<< "$pods_data"
    
    local pod_count=${#pod_names[@]}
    
    if [[ $pod_count -eq 0 ]]; then
        jq -n '{results: [], next_page_token: ""}'
        return 0
    fi
    
    # Decode pagination token
    local last_read_times=$(decode_token "$NEXT_PAGE_TOKEN")
    
    # Calculate pod limit
    local pod_limit=$(calculate_pod_limit "$LIMIT" "$pod_count")
    
    # Process all pods
    local all_logs="[]"
    
    for i in "${!pod_names[@]}"; do
        local pod_name="${pod_names[$i]}"
        local pod_id="${pod_ids[$i]}"
        
        local since_time=$(determine_since_time "$pod_id" "$last_read_times")
        
        local logs=$(get_pod_logs "$pod_name" "$since_time" "$pod_limit")
        
        if [[ -n "$logs" ]]; then
            local result=$(process_log_lines "$logs" "$FILTER_PATTERN" "$pod_name" "$pod_id")
            local processed_logs=$(echo "$result" | jq ".logs")
            local last_timestamp=$(echo "$result" | jq -r ".last_timestamp")

            if [[ -n "$processed_logs" && "$processed_logs" != "null" && "$processed_logs" != "[]" ]]; then
                all_logs=$(echo "$all_logs" | jq --argjson new_logs "$processed_logs" '. + $new_logs')
            fi

        fi
    done
    
    local sorted_logs=$(sort_and_limit_logs "$all_logs" "$LIMIT")

    local new_token_data="{}"

    local log_count=$(echo "$sorted_logs" | jq 'length')

    for ((i=0; i<$log_count; i++)); do
        local pod_id=$(echo "$sorted_logs" | jq -r ".[$i].pod.id")
        local datetime=$(echo "$sorted_logs" | jq -r ".[$i].datetime")
        
        new_token_data=$(echo "$new_token_data" | jq --arg podId "$pod_id" --arg dt "$datetime" '.[$podId] = $dt')
    done

    local next_page_token=""
    if [[ "$new_token_data" != "{}" ]]; then
        next_page_token=$(encode_token "$new_token_data")
    fi

    jq -n \
        --argjson results "$sorted_logs" \
        --arg token "$next_page_token" \
        '{results: $results, next_page_token: $token}'
}

for cmd in kubectl jq base64; do
    if ! command -v "$cmd" &> /dev/null; then
        echo "Error: $cmd is required but not installed." >&2
        exit 1
    fi
done

# Run main function
main "$@"