#!/bin/bash

set -euo pipefail

IAM=${IAM-"{}"}

IAM_ENABLED=$(echo "$IAM" | jq -r .ENABLED)

if [[ "$IAM_ENABLED" == "false" || "$IAM_ENABLED" == "null" ]]; then
  echo "No IAM role configuration. Skipping role setup"
  return
fi

ROLE_NAME=$(echo "$IAM" | jq -r .PREFIX)-"$SCOPE_ID"
ROLE_PATH="/nullplatform/custom-scopes/"
NAMESPACE=$(echo "$CONTEXT" | jq -r .k8s_namespace)
echo "Getting EKS OIDC provider for cluster: $CLUSTER_NAME"
OIDC_PROVIDER=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query "cluster.identity.oidc.issuer" --output text 2>&1 | sed -e "s/^https:\/\///") || {
  echo "ERROR: Failed to get OIDC provider for EKS cluster '$CLUSTER_NAME'"
  echo "AWS Error: $OIDC_PROVIDER"
  exit 1
}

echo "Getting AWS account ID"
AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text 2>&1) || {
  echo "ERROR: Failed to get AWS account ID"
  echo "AWS Error: $AWS_ACCOUNT_ID"
  exit 1
}
TRUST_POLICY_PATH="$OUTPUT_DIR/trust-policy.json"

# Step 1: Create the IAM trust policy
cat > "$TRUST_POLICY_PATH" <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Federated": "arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/${OIDC_PROVIDER}"
      },
      "Action": "sts:AssumeRoleWithWebIdentity",
      "Condition": {
        "StringEquals": {
          "${OIDC_PROVIDER}:sub": "system:serviceaccount:${NAMESPACE}:${ROLE_NAME}"
        }
      }
    }
  ]
}
EOF

## Step 2: Create IAM Role with optional boundary
BOUNDARY_ARN=$(echo "$IAM" | jq -r .ROLE.BOUNDARY_ARN)

APPLICATION_ID=$(echo "$CONTEXT" | jq -r '.application.id')
APPLICATION_SLUG=$(echo "$CONTEXT" | jq -r '.application.slug')
SCOPE_ID=$(echo "$CONTEXT" | jq -r '.scope.id')
SCOPE_SLUG=$(echo "$CONTEXT" | jq -r '.scope.slug')
ACCOUNT_ID=$(echo "$CONTEXT" | jq -r '.account.id')
ACCOUNT_SLUG=$(echo "$CONTEXT" | jq -r '.account.slug')
ORGANIZATION_ID=$(echo "$CONTEXT" | jq -r '.account.organization_id')
NAMESPACE_ID=$(echo "$CONTEXT" | jq -r '.namespace.id')
NAMESPACE_SLUG=$(echo "$CONTEXT" | jq -r '.namespace.slug')
DIMENSIONS=$(echo "$CONTEXT" | jq '.scope.dimensions')

BASE_TAGS=(
  "Key=application_id,Value=$APPLICATION_ID"
  "Key=application,Value=$APPLICATION_SLUG"
  "Key=scope_id,Value=$SCOPE_ID"
  "Key=scope,Value=$SCOPE_SLUG"
  "Key=account_id,Value=$ACCOUNT_ID"
  "Key=account,Value=$ACCOUNT_SLUG"
  "Key=organization_id,Value=$ORGANIZATION_ID"
  "Key=namespace_id,Value=$NAMESPACE_ID"
  "Key=namespace,Value=$NAMESPACE_SLUG"
  "Key=nullplatform,Value=true"
)

if [[ -n "$DIMENSIONS" && "$DIMENSIONS" != "null" ]]; then
  while IFS= read -r key; do
    value=$(echo "$DIMENSIONS" | jq -r --arg k "$key" '.[$k]')
    if [[ "$value" != "null" && -n "$value" ]]; then
      BASE_TAGS+=("Key=$key,Value=$value")
    fi
  done < <(echo "$DIMENSIONS" | jq -r 'keys[]')
fi

if [[ -n "$BOUNDARY_ARN" && "$BOUNDARY_ARN" != "null" ]]; then
  aws iam create-role \
    --role-name "$ROLE_NAME" \
    --path "$ROLE_PATH" \
    --assume-role-policy-document "file://$TRUST_POLICY_PATH" \
    --permissions-boundary "$BOUNDARY_ARN" \
    --tags "${BASE_TAGS[@]}" \
    --no-paginate
else
  aws iam create-role \
    --role-name "$ROLE_NAME" \
    --path "$ROLE_PATH" \
    --assume-role-policy-document "file://$TRUST_POLICY_PATH" \
    --tags "${BASE_TAGS[@]}" \
    --no-paginate
fi

rm "$TRUST_POLICY_PATH"

# Step 3: Attach policies
POLICIES_COUNT=$(echo "$IAM" | jq '.ROLE.POLICIES | length // 0')
for ((i=0; i<$POLICIES_COUNT; i++)); do
  POLICY_TYPE=$(echo "$IAM" | jq -r ".ROLE.POLICIES[$i].TYPE")
  POLICY_VALUE=$(echo "$IAM" | jq -r ".ROLE.POLICIES[$i].VALUE")

  echo "Processing policy $((i+1)): Type=$POLICY_TYPE"

  if [[ "$POLICY_TYPE" == "arn" ]]; then
    echo "Attaching managed policy: $POLICY_VALUE"
    aws iam attach-role-policy \
      --role-name "$ROLE_NAME" \
      --policy-arn "$POLICY_VALUE"

    if [[ $? -eq 0 ]]; then
      echo "✓ Successfully attached managed policy: $POLICY_VALUE"
    else
      echo "✗ Failed to attach managed policy: $POLICY_VALUE"
      exit 1
    fi

  elif [[ "$POLICY_TYPE" == "inline" ]]; then
    # For inline policies, we need a policy name
    POLICY_NAME="inline-policy-$((i+1))"
    echo "Attaching inline policy: $POLICY_NAME"

    # Create temporary file for the inline policy
    TEMP_POLICY_FILE="/tmp/inline-policy-$i.json"
    echo "$POLICY_VALUE" > "$TEMP_POLICY_FILE"

    aws iam put-role-policy \
      --role-name "$ROLE_NAME" \
      --policy-name "$POLICY_NAME" \
      --policy-document "file://$TEMP_POLICY_FILE"

    if [[ $? -eq 0 ]]; then
      echo "✓ Successfully attached inline policy: $POLICY_NAME"
    else
      echo "✗ Failed to attach inline policy: $POLICY_NAME"
      exit 1
    fi

    # Clean up temp file
    rm -f "$TEMP_POLICY_FILE"

  else
    echo "⚠ Unknown policy type: $POLICY_TYPE"
  fi
done
